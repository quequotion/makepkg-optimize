#!/usr/bin/bash
#
#   lto.sh - Compile with link-time optimization
#

[[ -n "$LIBMAKEPKG_BUILDENV_LTO_SH" ]] && return
LIBMAKEPKG_BUILDENV_LTO_SH=1

LIBRARY=${LIBRARY:-'@libmakepkgdir@'}

source "$LIBRARY/util/option.sh"

build_options+=('lto' 'lto-thin')
buildenv_functions+=('buildenv_lto')

buildenv_lto() {
  if check_buildoption "lto" "y" || check_buildoption "lto-thin" "y" && \
  [[ -f "$(gcc -print-search-dirs | grep install | awk '{print $2 "liblto_plugin.so"}')" ]]; then
    [[ "$CC" == "clang" || "$CXX" == "clang++" ]] && \
      ltoflags=" -flto" || \
      ltoflags=" -flto=$(getconf _NPROCESSORS_ONLN) -flto-partition=none -fno-fat-lto-objects"

    if check_buildoption "lto-thin" "y"; then
      [[ "$CC" == "clang" || "$CXX" == "clang++" ]] && \
        ltoflags="${ltoflags// -flto/ -flto=thin}" || \
        ltoflags="${ltoflags// -flto-partition=none / }"
    fi

    CFLAGS+="$ltoflags"
    CXXFLAGS+="$ltoflags"
    LDFLAGS+=" -fuse-linker-plugin $CFLAGS $CXXFLAGS"
    ltoplugin="$(gcc -print-search-dirs | grep install | awk '{print $2 "liblto_plugin.so"}')"
    ARFLAGS+=" --plugin $ltoplugin"
    RANLIBFLAGS+=" --plugin $ltoplugin"
    NMFLAGS+=" --plugin $ltoplugin"
  fi
}
